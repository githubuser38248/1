# -*- coding: utf-8 -*-
"""
Created on Thu Nov 18 22:18:46 2021
Wellenfront Licht


@author:

Beschreibung:
    Dieses Programm berechnet aus einem Spotfield die Wellenfront &
    Schwerpunktkoordinaten
    für einen Shack-Hartmann-Wellenfrontsensor. 

"""
import os
print(os.getcwd())#Folder to import
from PIL import Image
from numpy import asarray
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
print(datetime.today())
from mpl_toolkits import mplot3d



"Thorlabs WFS-150 Konstanten"
Pixelsize=4.65 #pixel size in µm
Resolution=[1280,1024] 
Lenslets=[39,31]#number of Lenslets
LensPitch = 150 #in µm
FocalLength = 5000 # in µm = 5mm


"Define arrays"
ia =                  np.empty([Lenslets[0], Lenslets[1]])
lx =                  np.empty([Lenslets[0], Lenslets[1]])
ly =                  np.empty([Lenslets[0], Lenslets[1]])
Delta_x_array =       np.empty([Lenslets[0], Lenslets[1]])
Delta_y_array  =      np.empty([Lenslets[0], Lenslets[1]])
Delta_x_array_in_m =  np.empty([Lenslets[0], Lenslets[1]])
Delta_y_array_in_m =  np.empty([Lenslets[0], Lenslets[1]])
lz_x =                np.empty([Lenslets[0], Lenslets[1]])
lz_y =                np.empty([Lenslets[0], Lenslets[1]])
WF_x=                 np.empty([Lenslets[0], Lenslets[1]])
WF_y=                 np.empty([Lenslets[0], Lenslets[1]])
WF =                  np.empty([Lenslets[0], Lenslets[1]])


Nx = np.linspace(0, 39, 39)
Ny = np.linspace(0, 39, 39)
[xxx,yyy]=np.meshgrid(Nx,Ny, sparse=True)



imageout = np.empty([Resolution[1], Resolution[0]])
for i in range (0,Resolution[0]):
    for j in range (0,Resolution[1]):
        imageout[j,i]=0

"Load the image"
image = Image.open('spmp.jpg').convert('L')#convert to greyscale
data = asarray(image)# convert image to numpy array
print(type(data))
print(data.shape)# summarize shape
image2 = Image.fromarray(data)# create Pillow image

"Methode zum der Integralen Schwerpunktberechnung in den Grenzen a&b"
def integrate(b,a):
    via=0
    viia=0
    dva=0
    viax=0
    viiax=0
    dvax=0
    viay=0
    viiay=0
    dvay=0
    for i in range (a,a+32):
        viia=0
        viiay=0
        viiax=0
        for j in range (b,b+32):
            dva=data[i,j]
            viia+=dva
            dvay=data[i,j]*i
            viiay+=dvay
            dvax=data[i,j]*j
            viiax+=dvax
        via+=viia
        viay+=viiay
        viax+=viiax
    vol=via
    if(vol<0.1):#Divided by Zero Check
        vol=0.1
    sy=viay/vol
    sx=viax/vol#numpy transponiert die Matrix
    array = [0 for jjj in range(5)]  # N = size of list you want
    array[0]=vol
    array[1]=sx#-b-16
    array[2]=sy#-a-16
    array[3]=array[1]-b-16
    array[4]=array[2]-a-16
    return array


"Main-Methode"
a=15
b=15
load=0
loadp=0
for i in range (0,Lenslets[0]-1):
    b=15
    for j in range (0,Lenslets[1]-1):
        returns = integrate (a,b)
        ia[i,j] = returns [0]
        lx[i,j] = returns [1]
        ly[i,j] = returns [2]
        Delta_x_array[i,j]= returns [3]
        Delta_y_array[i,j]= returns [4]
        Delta_x_array_in_m[i,j]=returns [3]*Pixelsize
        Delta_y_array_in_m[i,j]=returns [4]*Pixelsize
        lz_x[i,j]       =(returns[3]*Pixelsize )*LensPitch/FocalLength
        lz_y[i,j]       =(returns[4]*Pixelsize )*LensPitch/FocalLength
        
        if (ia[i,j]>300):
            plt.scatter(lx[i,j],ly[i,j], color="red")
            #plt.scatter(lx[i,j]+a+16,ly[i,j]+b+16, color="red")
        load+=1
        if(round(load/11.5)>loadp):
            loadp=round(load/11.5)       
            print('Calculation . . . ', round(load/11.5),'%')    
        a_1=round(lx[i,j])
        a_2=round(ly[i,j])
        imageout[a_2,a_1]=254#matrx transponiert
        
        b+=32
    a+=32

"Contour-Plot"
plt.title('Array mit Schwerpunktskoordinaten')
plt.xlabel('x')
plt.ylabel('y')
plt.axis('scaled')
plt.colorbar()
plt.show()

"Ergebnisse als Bild speichern"
fft = imageout.astype(np.uint8)
now = datetime.now()
pil_image=Image.fromarray(fft)
pil_image.show()
pil_image.convert('RGB')
date_time = now.strftime("%m-%d-%Y %H-%M-%S")
pil_image.save("Results Points from "+str(date_time)+".png", "PNG")

"Ergebnisse als Array speichern"
print('Saving files.')
np.savetxt("array_x from "+str(date_time)+".txt", lx)
np.savetxt("array_y from "+str(date_time)+".txt", ly)
np.savetxt("delta x from "+str(date_time)+".txt", Delta_x_array)
np.savetxt("delta_y from "+str(date_time)+".txt", Delta_y_array)
np.savetxt("delta x in µm from "+str(date_time)+".txt", Delta_x_array_in_m)
np.savetxt("delta_y in µm from "+str(date_time)+".txt", Delta_y_array_in_m)

""



for j in range (0,Lenslets[1]-1):
    WF_x[0,j]=lz_x[0,j]
    for i in range (1,Lenslets[0]-1):
        WF_x[i,j]=lz_x[i,j]+WF_x[i-1,j]
        
        
for i in range (0,Lenslets[0]-1):
    WF_y[i,0]=lz_y[i,0]
    for j in range (1,Lenslets[1]-1):
        WF_y[i,j]=lz_y[i,j]+WF_y[i,j-1]


for i in range (0,Lenslets[0]-1):
    for j in range (0,Lenslets[1]-1):
        WF[i,j] = WF_x[i,j] + WF_y[i,j]
        if WF [i,j]>=50:
            WF [i,j]=50


Xg=np.linspace (1, 31, 31)
Yg=np.linspace (1, 39, 39)

XXg, YYg = np.meshgrid(Xg,Yg)




fig = plt.figure()
ax = plt.axes(projection='3d')

ax.plot_surface(XXg, YYg, WF,cmap='viridis', edgecolor='none')
ax.set_title('Surface plot')
plt.show()












print('Program finished. 100 %')
