# -*- coding: utf-8 -*-
"""
@author:
    
Beschreibung:
    Dieses Programm berechnet aus einer Wellenfront die Zernikekoeffizienten. 
"""

import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.mplot3d import Axes3D

"Resolution // Genauigkeit der Berechnung"
n=24

"Laden des Phasenfeldes aus Text-Datei"
ww=np.empty([n, n])
w = np.loadtxt('wf.txt', delimiter=' ')
for i in range (0,n):
    for j in range (0,n):
        ww[i,j]=-w[i+9,j+3]+20


x=np.linspace(-1,1,n)
y=np.linspace(-1,1,n)
zk=np.empty([n, n])

"Hier kann eine Funktion eingegeben werden, für die die Zernike Koeffizienten berechnet werden."
for i in range (0,n):
    for j in range (0,n):
        zk[i,j]=6*(x[i]*y[j])+1.1#Hier kann eine Simulationsfunktion stehen.
        #zk[i,j]=2*(x[i]**2+y[j]**2)-1+x[i]+1.1
        #zk[i,j]=1+cos+2*x[i]**2+y[j]**2

z=ww
"Erzeugung des 3d-Diagramms"
xx,yy =np.meshgrid(x,y)   
fig = plt.figure()
axes = fig.gca(projection ='3d')
axes.plot_surface(xx, yy, z)
plt.show()

"""Im folgenden Abschnitt werden die Eigentlichen Zernike Koeffizenten berechnet.
Es werden die ersten 6 Zernike-Modes berechnet. Die höheren Modes können nach dem
gleichen Schema erweitert werden. 

"""
"Koeffizient c0 - Piston"
l=0
ksum=0
c0=0
for i in range (0,n):
    for j in range (0,n):
        if x[i]**2+y[j]**2<1:
            ksum+=z[i,j]
            l+=1
c0=ksum/l
for i in range (0,n):
    for j in range (0,n):
        z[i,j]-=c0
           
print ('Zernikekoeffizienten')
print ('c0 = ', c0)

"Koeffizient c1 - xTilt"
l=0
ksum=0
for i in range (0,n):
    for j in range (0,n):
        if x[i]**2+y[j]**2<1:
            if x[i] != 0:
                ksum+=z[i,j]/x[i]
                l+=1
c1=ksum/l

for i in range (0,n):
    for j in range (0,n):
        z[i,j]-=c1*x[i]

print ('c1 = ', c1)

"Koeffizient c2 - yTilt"

l=0
ksum=0
for i in range (0,n):
    for j in range (0,n):
        if x[i]**2+y[j]**2<1:
            if y[j] != 0:
                ksum+=z[i,j]/y[j]
                l+=1          
c2=ksum/l
for i in range (0,n):
    for j in range (0,n):
        z[i,j]-=c2*y[j]

print ('c2 = ', c2)


"Koeffizient c3 Defocus"
l=0
ksum=0
for i in range (0,n):
    for j in range (0,n):
        if x[i]**2+y[j]**2<1:
            if x[i]**2+y[j]**2!=0.5:
                ksum+=z[i,j]/(2*(x[i]**2+y[j]**2)-1)
                l+=1

c3=ksum/(l)

for i in range (0,n):
    for j in range (0,n):
        z[i,j]-=c3*(2*(x[i]**2+y[j]**2)-1)

print ('c3 = ', c3)

"Koeffizient c4 Astigmatismus"
l=0
ksum=0
for i in range (0,n):
    for j in range (0,n):
        if x[i]**2+y[j]**2<1:
            if x[i]**2-y[j]**2!=0:
                ksum+=z[i,j]/(x[i]**2-y[j]**2)
                l+=1

c4=ksum/(l)

for i in range (0,n):
    for j in range (0,n):
        z[i,j]-=c3*(x[i]**2-y[j]**2)

print ('c4 = ', c4)

"Koeffizient c5 Astigmatismus"
l=0
ksum=0
for i in range (0,n):
    for j in range (0,n):
        if x[i]**2+y[j]**2<1:
            if x[i]*y[j]!=0:
                ksum+=z[i,j]/(2*x[i]*y[j])
                l+=1

c5=ksum/(l)

for i in range (0,n):
    for j in range (0,n):
        z[i,j]-=c3*(2*x[i]*y[j])

print ('c5 = ', c5)
